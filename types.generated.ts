/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
  /** Text content with rich formatting capabilities used in Prismic documents. */
  PrismicRichText: any;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type IDQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['ID']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
  readonly ne: InputMaybe<Scalars['ID']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['ID']>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type PrismicAllDocumentTypes = PrismicNavigation | PrismicPage | PrismicPerson | PrismicSettings;

/** Metadata for alternate versions of a document in different languages. */
type PrismicAlternateLanguage = {
  readonly document: PrismicAllDocumentTypes;
  readonly id: Scalars['ID'];
  readonly lang: Scalars['String'];
  readonly raw: Scalars['JSON'];
  readonly type: Scalars['String'];
  readonly uid: Maybe<Scalars['String']>;
  /** The URL of the Prismic document determined using the configured Route Resolvers or Link Resolver. If Route Resolvers or a Link Resolver is not given, this field is `null`. */
  readonly url: Maybe<Scalars['String']>;
};

type PrismicAlternateLanguageFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly lang: InputMaybe<FieldSelectorEnum>;
  readonly raw: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type PrismicAlternateLanguageFilterInput = {
  readonly id: InputMaybe<IDQueryOperatorInput>;
  readonly lang: InputMaybe<StringQueryOperatorInput>;
  readonly raw: InputMaybe<JSONQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type PrismicAlternateLanguageFilterListInput = {
  readonly elemMatch: InputMaybe<PrismicAlternateLanguageFilterInput>;
};

type PrismicAlternateLanguageSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly lang: InputMaybe<SortOrderEnum>;
  readonly raw: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

/** oEmbed content from an oEmbed-enabled URL. */
type PrismicEmbedField = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type PrismicEmbedFieldConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PrismicEmbedFieldEdge>;
  readonly group: ReadonlyArray<PrismicEmbedFieldGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PrismicEmbedField>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PrismicEmbedFieldConnection_distinctArgs = {
  field: PrismicEmbedFieldFieldSelector;
};


type PrismicEmbedFieldConnection_groupArgs = {
  field: PrismicEmbedFieldFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PrismicEmbedFieldConnection_maxArgs = {
  field: PrismicEmbedFieldFieldSelector;
};


type PrismicEmbedFieldConnection_minArgs = {
  field: PrismicEmbedFieldFieldSelector;
};


type PrismicEmbedFieldConnection_sumArgs = {
  field: PrismicEmbedFieldFieldSelector;
};

type PrismicEmbedFieldEdge = {
  readonly next: Maybe<PrismicEmbedField>;
  readonly node: PrismicEmbedField;
  readonly previous: Maybe<PrismicEmbedField>;
};

type PrismicEmbedFieldFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type PrismicEmbedFieldFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type PrismicEmbedFieldGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PrismicEmbedFieldEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PrismicEmbedFieldGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PrismicEmbedField>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PrismicEmbedFieldGroupConnection_distinctArgs = {
  field: PrismicEmbedFieldFieldSelector;
};


type PrismicEmbedFieldGroupConnection_groupArgs = {
  field: PrismicEmbedFieldFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PrismicEmbedFieldGroupConnection_maxArgs = {
  field: PrismicEmbedFieldFieldSelector;
};


type PrismicEmbedFieldGroupConnection_minArgs = {
  field: PrismicEmbedFieldFieldSelector;
};


type PrismicEmbedFieldGroupConnection_sumArgs = {
  field: PrismicEmbedFieldFieldSelector;
};

type PrismicEmbedFieldSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

/** The style of temporary image shown while the full image loads. */
type PrismicGatsbyImageDataPlaceholder =
  /** This generates a very low-resolution version of the source image and displays it as a blurred background. */
  | 'blurred'
  /** The default placeholder. This calculates the dominant color of the source image and uses it as a solid background color. */
  | 'dominantColor'
  /** No placeholder. You can use the background color option to set a static background if you wish. */
  | 'none';

/** Geolocation coordinates. */
type PrismicGeoPointField = {
  /** The latitude value of the GeoPoint field. */
  readonly latitude: Maybe<Scalars['Float']>;
  /** The longitude value of the GeoPoint field. */
  readonly longitude: Maybe<Scalars['Float']>;
};

/** An Image field. */
type PrismicImageField = PrismicImageFieldBase & {
  /** An alternative text for the image. */
  readonly alt: Maybe<Scalars['String']>;
  /** Copyright information for the image. */
  readonly copyright: Maybe<Scalars['String']>;
  /** The image's width and height. */
  readonly dimensions: Maybe<PrismicImageFieldDimensions>;
  readonly gatsbyImageData: Maybe<Scalars['JSON']>;
  /** The locally download image file if the field is configured to download locally. */
  readonly localFile: Maybe<File>;
  /** The image's URL. */
  readonly url: Maybe<Scalars['String']>;
};


/** An Image field. */
type PrismicImageField_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  imgixParams: InputMaybe<PrismicImgixURLParams>;
  layout: InputMaybe<GatsbyImageLayout>;
  placeholder?: InputMaybe<PrismicGatsbyImageDataPlaceholder>;
  placeholderImgixParams: InputMaybe<PrismicImgixURLParams>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


/** An Image field. */
type PrismicImageField_urlArgs = {
  imgixParams: InputMaybe<PrismicImgixURLParams>;
};

/** An Image field. */
type PrismicImageFieldBase = {
  /** An alternative text for the image. */
  readonly alt: Maybe<Scalars['String']>;
  /** Copyright information for the image. */
  readonly copyright: Maybe<Scalars['String']>;
  /** The image's width and height. */
  readonly dimensions: Maybe<PrismicImageFieldDimensions>;
  /** `gatsby-plugin-image` image data. */
  readonly gatsbyImageData: Maybe<Scalars['JSON']>;
  /** The locally download image file if the field is configured to download locally. */
  readonly localFile: Maybe<File>;
  /** The image's URL. */
  readonly url: Maybe<Scalars['String']>;
};

/** Width and height of an image. */
type PrismicImageFieldDimensions = {
  /** The image's height in pixels. */
  readonly height: Scalars['Int'];
  /** The image's width in pixels. */
  readonly width: Scalars['Int'];
};

type PrismicImageFieldDimensionsFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type PrismicImageFieldDimensionsFilterInput = {
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type PrismicImageFieldDimensionsSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type PrismicImageFieldFieldSelector = {
  readonly alt: InputMaybe<FieldSelectorEnum>;
  readonly copyright: InputMaybe<FieldSelectorEnum>;
  readonly dimensions: InputMaybe<PrismicImageFieldDimensionsFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly localFile: InputMaybe<FileFieldSelector>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type PrismicImageFieldFilterInput = {
  readonly alt: InputMaybe<StringQueryOperatorInput>;
  readonly copyright: InputMaybe<StringQueryOperatorInput>;
  readonly dimensions: InputMaybe<PrismicImageFieldDimensionsFilterInput>;
  readonly gatsbyImageData: InputMaybe<JSONQueryOperatorInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type PrismicImageFieldSortInput = {
  readonly alt: InputMaybe<SortOrderEnum>;
  readonly copyright: InputMaybe<SortOrderEnum>;
  readonly dimensions: InputMaybe<PrismicImageFieldDimensionsSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly localFile: InputMaybe<FileSortInput>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type PrismicImgixURLParams = {
  /** Alias for `pdfAnnotation`. */
  readonly annotation: InputMaybe<Scalars['Boolean']>;
  /** Specifies an aspect ratio to maintain when resizing and cropping the image. [See docs](https://docs.imgix.com/apis/url/size/ar). */
  readonly ar: InputMaybe<Scalars['String']>;
  /** Applies automatic enhancements to images. [See docs](https://docs.imgix.com/apis/url/auto). */
  readonly auto: InputMaybe<Scalars['String']>;
  /** Alias for `blend`. */
  readonly b: InputMaybe<Scalars['String']>;
  /** Alias for `blendAlign`. */
  readonly ba: InputMaybe<Scalars['String']>;
  /** Alias for `blendAlpha`. */
  readonly balph: InputMaybe<Scalars['Int']>;
  /** Alias for `blendCrop`. */
  readonly bc: InputMaybe<Scalars['String']>;
  /** Alias for `blendFit`. */
  readonly bf: InputMaybe<Scalars['String']>;
  /** Colors the background of padded and partially-transparent images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/bg). */
  readonly bg: InputMaybe<Scalars['String']>;
  /** Removes background from image. Default: `false`. [See docs](https://docs.imgix.com/apis/rendering/background-removal/bg-remove). */
  readonly bgRemove: InputMaybe<Scalars['Boolean']>;
  /** Overrides default fallback behavior for bg-remove failures. Default: `true`. [See docs](https://docs.imgix.com/apis/rendering/background-removal/bg-remove). */
  readonly bgRemoveFallback: InputMaybe<Scalars['Boolean']>;
  /** Alias for `blendH`. */
  readonly bh: InputMaybe<Scalars['Int']>;
  /** Specifies the location of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend). */
  readonly blend: InputMaybe<Scalars['String']>;
  /** Changes the blend alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/blending/blend-align). */
  readonly blendAlign: InputMaybe<Scalars['String']>;
  /** Changes the alpha of the blend image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/blending/blend-alpha). */
  readonly blendAlpha: InputMaybe<Scalars['Int']>;
  /** Alias for `blendColor`. */
  readonly blendClr: InputMaybe<Scalars['String']>;
  /** Specifies a color to use when applying the blend. [See docs](https://docs.imgix.com/apis/url/blending/blend-color). */
  readonly blendColor: InputMaybe<Scalars['String']>;
  /** Specifies the type of crop for blend images. [See docs](https://docs.imgix.com/apis/url/blending/blend-crop). */
  readonly blendCrop: InputMaybe<Scalars['String']>;
  /** Specifies the fit mode for blend images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/blending/blend-fit). */
  readonly blendFit: InputMaybe<Scalars['String']>;
  /** Adjusts the height of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-h). */
  readonly blendH: InputMaybe<Scalars['Int']>;
  /** Sets the blend mode for a blend image. Default: `overlay`. [See docs](https://docs.imgix.com/apis/url/blending/blend-mode). */
  readonly blendMode: InputMaybe<Scalars['String']>;
  /** Applies padding to the blend image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-pad). */
  readonly blendPad: InputMaybe<Scalars['Int']>;
  /** Adjusts the size of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-size). */
  readonly blendSize: InputMaybe<Scalars['String']>;
  /** Adjusts the width of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-w). */
  readonly blendW: InputMaybe<Scalars['Int']>;
  /** Adjusts the x-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-x). */
  readonly blendX: InputMaybe<Scalars['Int']>;
  /** Adjusts the y-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-y). */
  readonly blendY: InputMaybe<Scalars['Int']>;
  /** Alias for `blendAlign`. */
  readonly blendalign: InputMaybe<Scalars['String']>;
  /** Alias for `blendAlpha`. */
  readonly blendalpha: InputMaybe<Scalars['Int']>;
  /** Alias for `blendColor`. */
  readonly blendclr: InputMaybe<Scalars['String']>;
  /** Alias for `blendColor`. */
  readonly blendcolor: InputMaybe<Scalars['String']>;
  /** Alias for `blendCrop`. */
  readonly blendcrop: InputMaybe<Scalars['String']>;
  /** Alias for `blendFit`. */
  readonly blendfit: InputMaybe<Scalars['String']>;
  /** Alias for `blendH`. */
  readonly blendh: InputMaybe<Scalars['Int']>;
  /** Alias for `blendMode`. */
  readonly blendmode: InputMaybe<Scalars['String']>;
  /** Alias for `blendPad`. */
  readonly blendpad: InputMaybe<Scalars['Int']>;
  /** Alias for `blendSize`. */
  readonly blendsize: InputMaybe<Scalars['String']>;
  /** Alias for `blendW`. */
  readonly blendw: InputMaybe<Scalars['Int']>;
  /** Alias for `blendX`. */
  readonly blendx: InputMaybe<Scalars['Int']>;
  /** Alias for `blendY`. */
  readonly blendy: InputMaybe<Scalars['Int']>;
  /** Applies a gaussian blur to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/blur). */
  readonly blur: InputMaybe<Scalars['Int']>;
  /** Alias for `blendMode`. */
  readonly bm: InputMaybe<Scalars['String']>;
  /** Applies a border to an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border). */
  readonly border: InputMaybe<Scalars['String']>;
  /** Sets bottom border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-bottom). */
  readonly borderBottom: InputMaybe<Scalars['Int']>;
  /** Sets left border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-left). */
  readonly borderLeft: InputMaybe<Scalars['Int']>;
  /** Sets the outer radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius). */
  readonly borderRadius: InputMaybe<Scalars['String']>;
  /** Sets the inner radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner). */
  readonly borderRadiusInner: InputMaybe<Scalars['String']>;
  /** Sets right border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-right). */
  readonly borderRight: InputMaybe<Scalars['Int']>;
  /** Sets top border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-top). */
  readonly borderTop: InputMaybe<Scalars['Int']>;
  /** Alias for `blendPad`. */
  readonly bp: InputMaybe<Scalars['Int']>;
  /** Adjusts the brightness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/bri). */
  readonly bri: InputMaybe<Scalars['Int']>;
  /** Alias for `blendSize`. */
  readonly bs: InputMaybe<Scalars['String']>;
  /** Alias for `blendW`. */
  readonly bw: InputMaybe<Scalars['Int']>;
  /** Alias for `blendX`. */
  readonly bx: InputMaybe<Scalars['Int']>;
  /** Alias for `blendY`. */
  readonly by: InputMaybe<Scalars['Int']>;
  /** Sets one or more Client-Hints headers. [See docs](https://docs.imgix.com/apis/url/format/ch). */
  readonly ch: InputMaybe<Scalars['String']>;
  /** Specifies the output chroma subsampling rate. Default: `420`. [See docs](https://docs.imgix.com/apis/url/format/chromasub). */
  readonly chromasub: InputMaybe<Scalars['Int']>;
  /** Limits the number of unique colors in an image. [See docs](https://docs.imgix.com/apis/url/format/colorquant). */
  readonly colorquant: InputMaybe<Scalars['Int']>;
  /** Specifies how many colors to include in a palette-extraction response. Default: `6`. [See docs](https://docs.imgix.com/apis/url/color-palette/colors). */
  readonly colors: InputMaybe<Scalars['Int']>;
  /** Adjusts the contrast of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/con). */
  readonly con: InputMaybe<Scalars['Int']>;
  /** Specifies the radius value for a rounded corner mask. [See docs](https://docs.imgix.com/apis/url/mask/corner-radius). */
  readonly cornerRadius: InputMaybe<Scalars['String']>;
  /** Specifies how to crop an image. [See docs](https://docs.imgix.com/apis/url/size/crop). */
  readonly crop: InputMaybe<Scalars['String']>;
  /** Specifies the color space of the output image. [See docs](https://docs.imgix.com/apis/url/format/cs). */
  readonly cs: InputMaybe<Scalars['String']>;
  /** Forces a URL to use send-file in its response. [See docs](https://docs.imgix.com/apis/url/format/dl). */
  readonly dl: InputMaybe<Scalars['String']>;
  /** Sets the DPI value in the EXIF header. [See docs](https://docs.imgix.com/apis/url/format/dpi). */
  readonly dpi: InputMaybe<Scalars['Int']>;
  /** Adjusts the device-pixel ratio of the output image. Default: `1`. [See docs](https://docs.imgix.com/apis/url/dpr). */
  readonly dpr: InputMaybe<Scalars['Float']>;
  /** Applies a duotone effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/duotone). */
  readonly duotone: InputMaybe<Scalars['String']>;
  /** Changes the alpha of the duotone effect atop the source image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/stylize/duotone-alpha). */
  readonly duotoneAlpha: InputMaybe<Scalars['Int']>;
  /** Adjusts the exposure of the output image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/exp). */
  readonly exp: InputMaybe<Scalars['Int']>;
  /** A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code. [See docs](https://docs.imgix.com/apis/url/expires). */
  readonly expires: InputMaybe<Scalars['String']>;
  /** Alias for `fit`. */
  readonly f: InputMaybe<Scalars['String']>;
  /** Selects a face to crop to. [See docs](https://docs.imgix.com/apis/url/face-detection/faceindex). */
  readonly faceindex: InputMaybe<Scalars['Int']>;
  /** Adjusts padding around a selected face. Default: `1`. [See docs](https://docs.imgix.com/apis/url/face-detection/facepad). */
  readonly facepad: InputMaybe<Scalars['Float']>;
  /** Specifies that face data should be included in output when combined with `fm=json`. [See docs](https://docs.imgix.com/apis/url/face-detection/faces). */
  readonly faces: InputMaybe<Scalars['Int']>;
  /** Determines how to fill in additional space created by the fit setting. [See docs](https://docs.imgix.com/apis/url/fill/fill). */
  readonly fill: InputMaybe<Scalars['String']>;
  /** Sets the fill color for images with additional space created by the fit setting. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/fill/fill-color). */
  readonly fillColor: InputMaybe<Scalars['String']>;
  /** Alias for `fillColor`. */
  readonly fillcolor: InputMaybe<Scalars['String']>;
  /** Specifies how to map the source image to the output image dimensions. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/size/fit). */
  readonly fit: InputMaybe<Scalars['String']>;
  /** Flips an image on a specified axis. [See docs](https://docs.imgix.com/apis/url/rotation/flip). */
  readonly flip: InputMaybe<Scalars['String']>;
  /** Changes the format of the output image. [See docs](https://docs.imgix.com/apis/url/format/fm). */
  readonly fm: InputMaybe<Scalars['String']>;
  /** Displays crosshairs identifying the location of the set focal point. Default: `false`. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug). */
  readonly fpDebug: InputMaybe<Scalars['Boolean']>;
  /** Sets the relative horizontal value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-x). */
  readonly fpX: InputMaybe<Scalars['Int']>;
  /** Sets the relative vertical value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-y). */
  readonly fpY: InputMaybe<Scalars['Int']>;
  /** Sets the relative zoom value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-z). */
  readonly fpZ: InputMaybe<Scalars['Float']>;
  /** Specifies the framerate of the generated image. */
  readonly fps: InputMaybe<Scalars['Int']>;
  /** Specifies the frame of an animated image to use. */
  readonly frame: InputMaybe<Scalars['String']>;
  /** Adjusts the gamma of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/gam). */
  readonly gam: InputMaybe<Scalars['Int']>;
  readonly gifQ: InputMaybe<Scalars['Int']>;
  /** Alias for `gifQ`. */
  readonly gifq: InputMaybe<Scalars['Int']>;
  /** Sets grid colors for the transparency checkerboard grid. */
  readonly gridColors: InputMaybe<Scalars['String']>;
  /** Sets grid size for the transparency checkerboard grid. */
  readonly gridSize: InputMaybe<Scalars['Int']>;
  /** Adjusts the height of the output image. [See docs](https://docs.imgix.com/apis/url/size/h). */
  readonly h: InputMaybe<Scalars['Int']>;
  /** Alias for `h`. */
  readonly height: InputMaybe<Scalars['Int']>;
  /** Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/high). */
  readonly high: InputMaybe<Scalars['Int']>;
  /** Applies a half-tone effect to the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/htn). */
  readonly htn: InputMaybe<Scalars['Int']>;
  /** Adjusts the hue of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/hue). */
  readonly hue: InputMaybe<Scalars['Int']>;
  /** Displays every Nth frame starting with the first frame. */
  readonly interval: InputMaybe<Scalars['Int']>;
  /** Alias for `invert`. */
  readonly inv: InputMaybe<Scalars['Boolean']>;
  /** Inverts the colors on the source image. Default: `false`. [See docs](https://docs.imgix.com/apis/url/adjustment/invert). */
  readonly invert: InputMaybe<Scalars['Boolean']>;
  /** Determine if IPTC data should be passed for JPEG images. */
  readonly iptc: InputMaybe<Scalars['String']>;
  /** Specifies the number of times an animated image should repeat. A value of 0 means infinite looping. Default: `0`. */
  readonly loop: InputMaybe<Scalars['Int']>;
  /** Specifies that the output image should be a lossless variant. Default: `false`. [See docs](https://docs.imgix.com/apis/url/format/lossless). */
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  /** Alias for `mark`. */
  readonly m: InputMaybe<Scalars['String']>;
  /** Alias for `markAlign`. */
  readonly ma: InputMaybe<Scalars['String']>;
  /** Alias for `markAlpha`. */
  readonly malph: InputMaybe<Scalars['Int']>;
  /** Specifies the location of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark). */
  readonly mark: InputMaybe<Scalars['String']>;
  /** Changes the watermark alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-align). */
  readonly markAlign: InputMaybe<Scalars['String']>;
  /** Changes the alpha of the watermark image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-alpha). */
  readonly markAlpha: InputMaybe<Scalars['Int']>;
  /** Changes base URL of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-base). */
  readonly markBase: InputMaybe<Scalars['String']>;
  /** Specifies the fit mode for watermark images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-fit). */
  readonly markFit: InputMaybe<Scalars['String']>;
  /** Adjusts the height of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-h). */
  readonly markH: InputMaybe<Scalars['Int']>;
  /** Applies padding to the watermark image. Default: `5`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-pad). */
  readonly markPad: InputMaybe<Scalars['Int']>;
  /** Rotates a watermark or tiled watermarks by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-rot). */
  readonly markRot: InputMaybe<Scalars['Float']>;
  /** Adjusts the scale of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-scale). */
  readonly markScale: InputMaybe<Scalars['Int']>;
  /** Adds tiled watermark. [See docs](https://docs.imgix.com/apis/url/watermark/mark-tile). */
  readonly markTile: InputMaybe<Scalars['String']>;
  /** Adjusts the width of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-w). */
  readonly markW: InputMaybe<Scalars['Int']>;
  /** Adjusts the x-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-x). */
  readonly markX: InputMaybe<Scalars['Int']>;
  /** Adjusts the y-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-y). */
  readonly markY: InputMaybe<Scalars['Int']>;
  /** Alias for `markAlign`. */
  readonly markalign: InputMaybe<Scalars['String']>;
  /** Alias for `markAlpha`. */
  readonly markalpha: InputMaybe<Scalars['Int']>;
  /** Alias for `markBase`. */
  readonly markbase: InputMaybe<Scalars['String']>;
  /** Alias for `markFit`. */
  readonly markfit: InputMaybe<Scalars['String']>;
  /** Alias for `markH`. */
  readonly markh: InputMaybe<Scalars['Int']>;
  /** Alias for `markPad`. */
  readonly markpad: InputMaybe<Scalars['Int']>;
  /** Alias for `markScale`. */
  readonly markscale: InputMaybe<Scalars['Int']>;
  /** Alias for `markTile`. */
  readonly marktile: InputMaybe<Scalars['String']>;
  /** Alias for `markW`. */
  readonly markw: InputMaybe<Scalars['Int']>;
  /** Alias for `markX`. */
  readonly markx: InputMaybe<Scalars['Int']>;
  /** Alias for `markY`. */
  readonly marky: InputMaybe<Scalars['Int']>;
  /** Defines the type of mask and specifies the URL if that type is selected. [See docs](https://docs.imgix.com/apis/url/mask). */
  readonly mask: InputMaybe<Scalars['String']>;
  /** Colors the background of the transparent mask area of images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/mask/mask-bg). */
  readonly maskBg: InputMaybe<Scalars['String']>;
  /** Alias for `maskBg`. */
  readonly maskbg: InputMaybe<Scalars['String']>;
  /** Specifies the maximum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-height). */
  readonly maxH: InputMaybe<Scalars['Int']>;
  /** Alias for `maxH`. */
  readonly maxHeight: InputMaybe<Scalars['Int']>;
  /** Specifies the maximum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-width). */
  readonly maxW: InputMaybe<Scalars['Int']>;
  /** Alias for `maxW`. */
  readonly maxWidth: InputMaybe<Scalars['Int']>;
  /** Alias for `markBase`. */
  readonly mb: InputMaybe<Scalars['String']>;
  /** Alias for `markFit`. */
  readonly mf: InputMaybe<Scalars['String']>;
  /** Alias for `markH`. */
  readonly mh: InputMaybe<Scalars['Int']>;
  /** Specifies the minimum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-height). */
  readonly minH: InputMaybe<Scalars['Int']>;
  /** Alias for `minH`. */
  readonly minHeight: InputMaybe<Scalars['Int']>;
  /** Specifies the minimum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-width). */
  readonly minW: InputMaybe<Scalars['Int']>;
  /** Alias for `minW`. */
  readonly minWidth: InputMaybe<Scalars['Int']>;
  /** Alias for `monochrome`. */
  readonly mono: InputMaybe<Scalars['String']>;
  /** Applies a monochrome effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/monochrome). */
  readonly monochrome: InputMaybe<Scalars['String']>;
  /** Alias for `markPad`. */
  readonly mp: InputMaybe<Scalars['Int']>;
  /** Alias for `markScale`. */
  readonly ms: InputMaybe<Scalars['Int']>;
  /** Alias for `markTile`. */
  readonly mtile: InputMaybe<Scalars['String']>;
  /** Alias for `markW`. */
  readonly mw: InputMaybe<Scalars['Int']>;
  /** Alias for `markX`. */
  readonly mx: InputMaybe<Scalars['Int']>;
  /** Alias for `markY`. */
  readonly my: InputMaybe<Scalars['Int']>;
  /** Reduces the noise in an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nr). */
  readonly nr: InputMaybe<Scalars['Int']>;
  /** Provides a threshold by which to sharpen an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nrs). */
  readonly nrs: InputMaybe<Scalars['Int']>;
  /** Alias for `orient`. */
  readonly or: InputMaybe<Scalars['Int']>;
  /** Changes the image orientation. [See docs](https://docs.imgix.com/apis/url/rotation/orient). */
  readonly orient: InputMaybe<Scalars['Int']>;
  /** Pads an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad). */
  readonly pad: InputMaybe<Scalars['Int']>;
  /** Sets bottom padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-bottom). */
  readonly padBottom: InputMaybe<Scalars['Int']>;
  /** Sets left padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-left). */
  readonly padLeft: InputMaybe<Scalars['Int']>;
  /** Sets right padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-right). */
  readonly padRight: InputMaybe<Scalars['Int']>;
  /** Sets top padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-top). */
  readonly padTop: InputMaybe<Scalars['Int']>;
  /** Selects a page from a PDF for display. Default: `1`. [See docs](https://docs.imgix.com/apis/url/pdf/page). */
  readonly page: InputMaybe<Scalars['Int']>;
  /** Specifies an output format for palette-extraction. [See docs](https://docs.imgix.com/apis/url/color-palette/palette). */
  readonly palette: InputMaybe<Scalars['String']>;
  /** Enables or disables PDF annotation. Default: `true`. [See docs](https://docs.imgix.com/apis/url/pdf/pdf-annotation). */
  readonly pdfAnnotation: InputMaybe<Scalars['Boolean']>;
  /** Specifies a CSS prefix for all classes in palette-extraction. Default: `image`. [See docs](https://docs.imgix.com/apis/url/color-palette/prefix). */
  readonly prefix: InputMaybe<Scalars['String']>;
  /** Applies a pixelation effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/px). */
  readonly px: InputMaybe<Scalars['Int']>;
  /** Adjusts the quality of an output image. Default: `75`. [See docs](https://docs.imgix.com/apis/url/format/q). */
  readonly q: InputMaybe<Scalars['Int']>;
  /** Crops an image to a specified rectangle. [See docs](https://docs.imgix.com/apis/url/size/rect). */
  readonly rect: InputMaybe<Scalars['String']>;
  /** Reverses the frame order on the source animation. Default: `false`. */
  readonly reverse: InputMaybe<Scalars['Boolean']>;
  /** Rotates an image by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/rotation/rot). */
  readonly rot: InputMaybe<Scalars['Float']>;
  /** Adjusts the saturation of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sat). */
  readonly sat: InputMaybe<Scalars['Int']>;
  /** Applies a sepia effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/sepia). */
  readonly sepia: InputMaybe<Scalars['Int']>;
  /** Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/shad). */
  readonly shad: InputMaybe<Scalars['Float']>;
  /** Adjusts the sharpness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sharp). */
  readonly sharp: InputMaybe<Scalars['Float']>;
  /** Skips every Nth frame starting with the first frame. */
  readonly skip: InputMaybe<Scalars['Int']>;
  /** Alias for `txt`. */
  readonly t: InputMaybe<Scalars['String']>;
  /** Alias for `txtAlign`. */
  readonly ta: InputMaybe<Scalars['String']>;
  /** Alias for `txtColor`. */
  readonly tc: InputMaybe<Scalars['String']>;
  /** Alias for `txtClip`. */
  readonly tcl: InputMaybe<Scalars['String']>;
  /** Alias for `txtFont`. */
  readonly tf: InputMaybe<Scalars['String']>;
  /** Alias for `txtLine`. */
  readonly tl: InputMaybe<Scalars['Int']>;
  /** Alias for `txtPad`. */
  readonly tp: InputMaybe<Scalars['Int']>;
  /** Adds checkerboard behind images which support transparency. [See docs](https://docs.imgix.com/apis/url/fill/transparency). */
  readonly transparency: InputMaybe<Scalars['String']>;
  /** Trims the source image. [See docs](https://docs.imgix.com/apis/url/trim/trim). */
  readonly trim: InputMaybe<Scalars['String']>;
  /** Specifies a trim color on a trim operation. [See docs](https://docs.imgix.com/apis/url/trim/trim-color). */
  readonly trimColor: InputMaybe<Scalars['String']>;
  /** Specifies the mean difference on a trim operation. Default: `11`. [See docs](https://docs.imgix.com/apis/url/trim/trim-md). */
  readonly trimMd: InputMaybe<Scalars['Float']>;
  /** Pads the area of the source image before trimming. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-pad). */
  readonly trimPad: InputMaybe<Scalars['Int']>;
  /** Specifies the standard deviation on a trim operation. Default: `10`. [See docs](https://docs.imgix.com/apis/url/trim/trim-sd). */
  readonly trimSd: InputMaybe<Scalars['Float']>;
  /** Specifies the tolerance on a trim operation. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-tol). */
  readonly trimTol: InputMaybe<Scalars['Float']>;
  /** Alias for `trimColor`. */
  readonly trimcolor: InputMaybe<Scalars['String']>;
  /** Alias for `trimMd`. */
  readonly trimmd: InputMaybe<Scalars['Float']>;
  /** Alias for `trimPad`. */
  readonly trimpad: InputMaybe<Scalars['Int']>;
  /** Alias for `trimSd`. */
  readonly trimsd: InputMaybe<Scalars['Float']>;
  /** Alias for `trimTol`. */
  readonly trimtol: InputMaybe<Scalars['Float']>;
  /** Alias for `txtShad`. */
  readonly tsh: InputMaybe<Scalars['Float']>;
  /** Alias for `txtSize`. */
  readonly tsz: InputMaybe<Scalars['Int']>;
  /** Alias for `txtTrack`. */
  readonly tt: InputMaybe<Scalars['Int']>;
  /** Sets the text string to render. [See docs](https://docs.imgix.com/apis/url/text/txt). */
  readonly txt: InputMaybe<Scalars['String']>;
  /** Sets the vertical and horizontal alignment of rendered text relative to the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-align). */
  readonly txtAlign: InputMaybe<Scalars['String']>;
  /** Sets the clipping properties of rendered text. Default: `end`. [See docs](https://docs.imgix.com/apis/url/text/txt-clip). */
  readonly txtClip: InputMaybe<Scalars['String']>;
  /** Alias for `txtColor`. */
  readonly txtClr: InputMaybe<Scalars['String']>;
  /** Specifies the color of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-color). */
  readonly txtColor: InputMaybe<Scalars['String']>;
  /** Specifies the fit approach for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-fit). */
  readonly txtFit: InputMaybe<Scalars['String']>;
  /** Selects a font for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-font). */
  readonly txtFont: InputMaybe<Scalars['String']>;
  /** Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-lead). */
  readonly txtLead: InputMaybe<Scalars['Int']>;
  /** Controls the level of ligature substitution. [See docs](https://docs.imgix.com/apis/url/text/txt-lig). */
  readonly txtLig: InputMaybe<Scalars['Int']>;
  /** Outlines the rendered text with a specified color. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-line). */
  readonly txtLine: InputMaybe<Scalars['Int']>;
  /** Alias for `txtLineColor`. */
  readonly txtLineClr: InputMaybe<Scalars['String']>;
  /** Specifies a text outline color. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/text/txt-line-color). */
  readonly txtLineColor: InputMaybe<Scalars['String']>;
  /** Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-pad). */
  readonly txtPad: InputMaybe<Scalars['Int']>;
  /** Applies a shadow to rendered text. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-shad). */
  readonly txtShad: InputMaybe<Scalars['Float']>;
  /** Sets the font size of rendered text. Default: `12`. [See docs](https://docs.imgix.com/apis/url/text/txt-size). */
  readonly txtSize: InputMaybe<Scalars['Int']>;
  /** Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-track). */
  readonly txtTrack: InputMaybe<Scalars['Int']>;
  /** Sets the width of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-width). */
  readonly txtWidth: InputMaybe<Scalars['Int']>;
  /** Sets the horizontal (x) position of the text in pixels relative to the left edge of the base image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-x). */
  readonly txtX: InputMaybe<Scalars['Int']>;
  /** Sets the vertical (y) position of the text in pixels relative to the top edge of the base image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-y). */
  readonly txtY: InputMaybe<Scalars['Int']>;
  /** Alias for `txtAlign`. */
  readonly txtalign: InputMaybe<Scalars['String']>;
  /** Alias for `txtClip`. */
  readonly txtclip: InputMaybe<Scalars['String']>;
  /** Alias for `txtColor`. */
  readonly txtclr: InputMaybe<Scalars['String']>;
  /** Alias for `txtColor`. */
  readonly txtcolor: InputMaybe<Scalars['String']>;
  /** Alias for `txtFit`. */
  readonly txtfit: InputMaybe<Scalars['String']>;
  /** Alias for `txtFont`. */
  readonly txtfont: InputMaybe<Scalars['String']>;
  /** Alias for `txtLead`. */
  readonly txtlead: InputMaybe<Scalars['Int']>;
  /** Alias for `txtLig`. */
  readonly txtlig: InputMaybe<Scalars['Int']>;
  /** Alias for `txtLine`. */
  readonly txtline: InputMaybe<Scalars['Int']>;
  /** Alias for `txtLineColor`. */
  readonly txtlineclr: InputMaybe<Scalars['String']>;
  /** Alias for `txtLineColor`. */
  readonly txtlinecolor: InputMaybe<Scalars['String']>;
  /** Alias for `txtPad`. */
  readonly txtpad: InputMaybe<Scalars['Int']>;
  /** Alias for `txtShad`. */
  readonly txtshad: InputMaybe<Scalars['Float']>;
  /** Alias for `txtSize`. */
  readonly txtsize: InputMaybe<Scalars['Int']>;
  /** Alias for `txtTrack`. */
  readonly txttrack: InputMaybe<Scalars['Int']>;
  /** Alias for `txtWidth`. */
  readonly txtwidth: InputMaybe<Scalars['Int']>;
  /** Alias for `txtX`. */
  readonly txtx: InputMaybe<Scalars['Int']>;
  /** Alias for `txtY`. */
  readonly txty: InputMaybe<Scalars['Int']>;
  /** Uses generative AI fill to upscale low resolution images. Default: `false`. [See docs](https://docs.imgix.com/apis/rendering/super-resolution/upscale). */
  readonly upscale: InputMaybe<Scalars['Boolean']>;
  /** Overrides default fallback behavior for super resolution failures. Default: `true`. [See docs](https://docs.imgix.com/apis/rendering/super-resolution/upscale-fallback). */
  readonly upscaleFallback: InputMaybe<Scalars['Boolean']>;
  /** Sharpens the source image using an unsharp mask. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/usm). */
  readonly usm: InputMaybe<Scalars['Int']>;
  /** Specifies the radius for an unsharp mask operation. Default: `2.5`. [See docs](https://docs.imgix.com/apis/url/adjustment/usmrad). */
  readonly usmrad: InputMaybe<Scalars['Float']>;
  /** Adjusts the vibrance of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/vib). */
  readonly vib: InputMaybe<Scalars['Int']>;
  /** Adjusts the width of the output image. [See docs](https://docs.imgix.com/apis/url/size/w). */
  readonly w: InputMaybe<Scalars['Int']>;
  /** Alias for `w`. */
  readonly width: InputMaybe<Scalars['Int']>;
};

/** A link to the web, a document in the Prismic repository, or a file in the Prismic Media Library */
type PrismicLinkField = {
  /** The Prismic document if the field links to a document. */
  readonly document: Maybe<PrismicAllDocumentTypes>;
  /** The ID of the selected Prismic document if the field links to a document. */
  readonly id: Maybe<Scalars['ID']>;
  /** Determines if the linked document exists. */
  readonly isBroken: Maybe<Scalars['Boolean']>;
  /** The language of the selected Prismic document if the field links to a document. */
  readonly lang: Maybe<Scalars['String']>;
  /** The type of link for this field value. */
  readonly link_type: Maybe<PrismicLinkType>;
  /** The locally download file if the field links to a media file and the field is configured to download locally. */
  readonly localFile: Maybe<File>;
  /** **Do not use this field unless you know what you are doing**. The unprocessed field value returned from the Prismic REST API. */
  readonly raw: Scalars['JSON'];
  /** The file size of the linked file. */
  readonly size: Maybe<Scalars['Int']>;
  /** The slug of the selected Prismic document if the field links to a document. */
  readonly slug: Maybe<Scalars['String']>;
  /** The list of tags for the selected Prismic document if the field links to a document. */
  readonly tags: Maybe<ReadonlyArray<Scalars['String']>>;
  /** `_blank` if the field value is configured to "Open in a new window," `null` otherwise. */
  readonly target: Maybe<Scalars['String']>;
  /** The type of the selected Prismic document if the field links to a document. */
  readonly type: Maybe<Scalars['String']>;
  /** The UID of the selected Prismic document if the field links to a document that contains a UID field. */
  readonly uid: Maybe<Scalars['String']>;
  /** The URL of the linked website, Prismic document, or file. If the field value is a Prismic document, the URL is determined using the configured Route Resolvers or Link Resolver. If Route Resolvers or a Link Resolver is not given, this field is `null`. */
  readonly url: Maybe<Scalars['String']>;
};

type PrismicLinkFieldFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly isBroken: InputMaybe<FieldSelectorEnum>;
  readonly lang: InputMaybe<FieldSelectorEnum>;
  readonly link_type: InputMaybe<FieldSelectorEnum>;
  readonly localFile: InputMaybe<FileFieldSelector>;
  readonly raw: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly target: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type PrismicLinkFieldFilterInput = {
  readonly id: InputMaybe<IDQueryOperatorInput>;
  readonly isBroken: InputMaybe<BooleanQueryOperatorInput>;
  readonly lang: InputMaybe<StringQueryOperatorInput>;
  readonly link_type: InputMaybe<PrismicLinkTypeQueryOperatorInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly raw: InputMaybe<JSONQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly target: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type PrismicLinkFieldSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly isBroken: InputMaybe<SortOrderEnum>;
  readonly lang: InputMaybe<SortOrderEnum>;
  readonly link_type: InputMaybe<SortOrderEnum>;
  readonly localFile: InputMaybe<FileSortInput>;
  readonly raw: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly target: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

/** Types of a Prismic Link field value. */
type PrismicLinkType =
  /** An unknown link type. */
  | 'Any'
  /** A link to a document in the Prismic repository. */
  | 'Document'
  /** A link to a file in the Prismic Media Library. */
  | 'Media'
  /** A link to the web. */
  | 'Web';

type PrismicLinkTypeQueryOperatorInput = {
  readonly eq: InputMaybe<PrismicLinkType>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<PrismicLinkType>>>;
  readonly ne: InputMaybe<PrismicLinkType>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<PrismicLinkType>>>;
};

/** A Navigation document from Prismic. */
type PrismicNavigation = Node & {
  /** Query this field to enable preview support on this node. Requires `gatsby-plugin-prismic-preview` integrated in your app to enable previews. */
  readonly _previewable: Scalars['ID'];
  /** Alternate versions of the document in different languages. */
  readonly alternate_languages: ReadonlyArray<PrismicAlternateLanguage>;
  readonly children: ReadonlyArray<Node>;
  /** Content for the document. */
  readonly data: PrismicNavigationData;
  /** **Do not use this field unless you know what you are doing**. The unprocessed `data` property of the Prismic document. Querying individual fields via GraphQL is much preferred. */
  readonly dataRaw: Scalars['JSON'];
  /** The timestamp at which the document was first published. */
  readonly first_publication_date: Scalars['Date'];
  /** The URL to fetch this document's JSON value from the Prismic REST API. */
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** The language of the Prismic document. */
  readonly lang: Scalars['String'];
  /** The timestamp at which the document was last published. */
  readonly last_publication_date: Scalars['Date'];
  readonly parent: Maybe<Node>;
  /** The identifier for the Prismic document. It is guaranteed to be unique within all documents of all types from the same Prismic repository. */
  readonly prismicId: Scalars['ID'];
  /** **Do not use this field unless you know what you are doing**. The unprocessed Prismic document value returned from the Prismic REST API. */
  readonly raw: Scalars['JSON'];
  /** Tags associated with the Prismic document. */
  readonly tags: ReadonlyArray<Scalars['String']>;
  /** The type of the Prismic document. */
  readonly type: Scalars['String'];
  /** The unique identifier for the Prismic document. It is guaranteed to be unique within all documents of the same type from the same Prismic repository. */
  readonly uid: Scalars['String'];
  /** The URL of the Prismic document determined using the configured Route Resolvers or Link Resolver. If Route Resolvers or a Link Resolver is not given, this field is `null`. */
  readonly url: Maybe<Scalars['String']>;
};


/** A Navigation document from Prismic. */
type PrismicNavigation_first_publication_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


/** A Navigation document from Prismic. */
type PrismicNavigation_last_publication_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type PrismicNavigationConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PrismicNavigationEdge>;
  readonly group: ReadonlyArray<PrismicNavigationGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PrismicNavigation>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PrismicNavigationConnection_distinctArgs = {
  field: PrismicNavigationFieldSelector;
};


type PrismicNavigationConnection_groupArgs = {
  field: PrismicNavigationFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PrismicNavigationConnection_maxArgs = {
  field: PrismicNavigationFieldSelector;
};


type PrismicNavigationConnection_minArgs = {
  field: PrismicNavigationFieldSelector;
};


type PrismicNavigationConnection_sumArgs = {
  field: PrismicNavigationFieldSelector;
};

type PrismicNavigationData = {
  /** A Group field. */
  readonly nav_items: ReadonlyArray<PrismicNavigationDataNavItemsItem>;
  /** A Title field. */
  readonly title: PrismicRichTextField;
};

type PrismicNavigationDataFieldSelector = {
  readonly nav_items: InputMaybe<PrismicNavigationDataNavItemsItemFieldSelector>;
  readonly title: InputMaybe<PrismicRichTextFieldFieldSelector>;
};

type PrismicNavigationDataFilterInput = {
  readonly nav_items: InputMaybe<PrismicNavigationDataNavItemsItemFilterListInput>;
  readonly title: InputMaybe<PrismicRichTextFieldFilterInput>;
};

/** An item for a Group field. */
type PrismicNavigationDataNavItemsItem = {
  /** A Title field. */
  readonly label: PrismicRichTextField;
  /**
   * A Link field.
   *
   * To download linked files locally and populate the `localFile` field, add the following path to `gatsby-source-prismic`'s `shouldDownloadFiles` option:
   *
   * `"navigation.data.nav_items.link": true,`
   */
  readonly link: Maybe<PrismicLinkField>;
};

type PrismicNavigationDataNavItemsItemFieldSelector = {
  readonly label: InputMaybe<PrismicRichTextFieldFieldSelector>;
  readonly link: InputMaybe<PrismicLinkFieldFieldSelector>;
};

type PrismicNavigationDataNavItemsItemFilterInput = {
  readonly label: InputMaybe<PrismicRichTextFieldFilterInput>;
  readonly link: InputMaybe<PrismicLinkFieldFilterInput>;
};

type PrismicNavigationDataNavItemsItemFilterListInput = {
  readonly elemMatch: InputMaybe<PrismicNavigationDataNavItemsItemFilterInput>;
};

type PrismicNavigationDataNavItemsItemSortInput = {
  readonly label: InputMaybe<PrismicRichTextFieldSortInput>;
  readonly link: InputMaybe<PrismicLinkFieldSortInput>;
};

type PrismicNavigationDataSortInput = {
  readonly nav_items: InputMaybe<PrismicNavigationDataNavItemsItemSortInput>;
  readonly title: InputMaybe<PrismicRichTextFieldSortInput>;
};

type PrismicNavigationEdge = {
  readonly next: Maybe<PrismicNavigation>;
  readonly node: PrismicNavigation;
  readonly previous: Maybe<PrismicNavigation>;
};

type PrismicNavigationFieldSelector = {
  readonly _previewable: InputMaybe<FieldSelectorEnum>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly data: InputMaybe<PrismicNavigationDataFieldSelector>;
  readonly dataRaw: InputMaybe<FieldSelectorEnum>;
  readonly first_publication_date: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lang: InputMaybe<FieldSelectorEnum>;
  readonly last_publication_date: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prismicId: InputMaybe<FieldSelectorEnum>;
  readonly raw: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type PrismicNavigationFilterInput = {
  readonly _previewable: InputMaybe<IDQueryOperatorInput>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly data: InputMaybe<PrismicNavigationDataFilterInput>;
  readonly dataRaw: InputMaybe<JSONQueryOperatorInput>;
  readonly first_publication_date: InputMaybe<DateQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lang: InputMaybe<StringQueryOperatorInput>;
  readonly last_publication_date: InputMaybe<DateQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prismicId: InputMaybe<IDQueryOperatorInput>;
  readonly raw: InputMaybe<JSONQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type PrismicNavigationGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PrismicNavigationEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PrismicNavigationGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PrismicNavigation>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PrismicNavigationGroupConnection_distinctArgs = {
  field: PrismicNavigationFieldSelector;
};


type PrismicNavigationGroupConnection_groupArgs = {
  field: PrismicNavigationFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PrismicNavigationGroupConnection_maxArgs = {
  field: PrismicNavigationFieldSelector;
};


type PrismicNavigationGroupConnection_minArgs = {
  field: PrismicNavigationFieldSelector;
};


type PrismicNavigationGroupConnection_sumArgs = {
  field: PrismicNavigationFieldSelector;
};

type PrismicNavigationSortInput = {
  readonly _previewable: InputMaybe<SortOrderEnum>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly data: InputMaybe<PrismicNavigationDataSortInput>;
  readonly dataRaw: InputMaybe<SortOrderEnum>;
  readonly first_publication_date: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lang: InputMaybe<SortOrderEnum>;
  readonly last_publication_date: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prismicId: InputMaybe<SortOrderEnum>;
  readonly raw: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

/** A Page document from Prismic. */
type PrismicPage = Node & {
  /** Query this field to enable preview support on this node. Requires `gatsby-plugin-prismic-preview` integrated in your app to enable previews. */
  readonly _previewable: Scalars['ID'];
  /** Alternate versions of the document in different languages. */
  readonly alternate_languages: ReadonlyArray<PrismicAlternateLanguage>;
  readonly children: ReadonlyArray<Node>;
  /** Content for the document. */
  readonly data: PrismicPageData;
  /** **Do not use this field unless you know what you are doing**. The unprocessed `data` property of the Prismic document. Querying individual fields via GraphQL is much preferred. */
  readonly dataRaw: Scalars['JSON'];
  /** The timestamp at which the document was first published. */
  readonly first_publication_date: Scalars['Date'];
  readonly gatsbyPath: Maybe<Scalars['String']>;
  /** The URL to fetch this document's JSON value from the Prismic REST API. */
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** The language of the Prismic document. */
  readonly lang: Scalars['String'];
  /** The timestamp at which the document was last published. */
  readonly last_publication_date: Scalars['Date'];
  readonly parent: Maybe<Node>;
  /** The identifier for the Prismic document. It is guaranteed to be unique within all documents of all types from the same Prismic repository. */
  readonly prismicId: Scalars['ID'];
  /** **Do not use this field unless you know what you are doing**. The unprocessed Prismic document value returned from the Prismic REST API. */
  readonly raw: Scalars['JSON'];
  /** Tags associated with the Prismic document. */
  readonly tags: ReadonlyArray<Scalars['String']>;
  /** The type of the Prismic document. */
  readonly type: Scalars['String'];
  /** The unique identifier for the Prismic document. It is guaranteed to be unique within all documents of the same type from the same Prismic repository. */
  readonly uid: Scalars['String'];
  /** The URL of the Prismic document determined using the configured Route Resolvers or Link Resolver. If Route Resolvers or a Link Resolver is not given, this field is `null`. */
  readonly url: Maybe<Scalars['String']>;
};


/** A Page document from Prismic. */
type PrismicPage_first_publication_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


/** A Page document from Prismic. */
type PrismicPage_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


/** A Page document from Prismic. */
type PrismicPage_last_publication_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type PrismicPageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PrismicPageEdge>;
  readonly group: ReadonlyArray<PrismicPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PrismicPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PrismicPageConnection_distinctArgs = {
  field: PrismicPageFieldSelector;
};


type PrismicPageConnection_groupArgs = {
  field: PrismicPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PrismicPageConnection_maxArgs = {
  field: PrismicPageFieldSelector;
};


type PrismicPageConnection_minArgs = {
  field: PrismicPageFieldSelector;
};


type PrismicPageConnection_sumArgs = {
  field: PrismicPageFieldSelector;
};

type PrismicPageData = {
  readonly body: ReadonlyArray<PrismicPageDataBody>;
  /** A Key Text field. */
  readonly meta_description: Maybe<Scalars['String']>;
  /** A Key Text field. */
  readonly meta_title: Maybe<Scalars['String']>;
  /** A Content Relationship field. */
  readonly parent: Maybe<PrismicLinkField>;
  /** A Boolean field. */
  readonly redirect_is_permanent: Maybe<Scalars['Boolean']>;
  /**
   * A Link field.
   *
   * To download linked files locally and populate the `localFile` field, add the following path to `gatsby-source-prismic`'s `shouldDownloadFiles` option:
   *
   * `"page.data.redirect_to": true,`
   */
  readonly redirect_to: Maybe<PrismicLinkField>;
  /** A Title field. */
  readonly title: PrismicRichTextField;
};

type PrismicPageDataBody = PrismicPageDataBodyAnchor | PrismicPageDataBodyCallToAction | PrismicPageDataBodyCenteredText | PrismicPageDataBodyPageIntro | PrismicPageDataBodyTeam | PrismicPageDataBodyTextWithImage | PrismicPageDataBodyTexturedImage | PrismicPageDataBodyTwoColumnText;

type PrismicPageDataBodyAnchor = PrismicSlice & {
  readonly id: Scalars['ID'];
  readonly primary: PrismicPageDataBodyAnchorPrimary;
  readonly slice_label: Maybe<Scalars['String']>;
  readonly slice_type: Scalars['String'];
};

type PrismicPageDataBodyAnchorPrimary = {
  /** A Key Text field. */
  readonly anchor: Maybe<Scalars['String']>;
};

type PrismicPageDataBodyCallToAction = PrismicSlice & {
  readonly id: Scalars['ID'];
  readonly primary: PrismicPageDataBodyCallToActionPrimary;
  readonly slice_label: Maybe<Scalars['String']>;
  readonly slice_type: Scalars['String'];
};

type PrismicPageDataBodyCallToActionPrimary = {
  /** A Title field. */
  readonly heading: PrismicRichTextField;
  /** A Title field. */
  readonly subheading: PrismicRichTextField;
  /** A Rich Text field. */
  readonly text: PrismicRichTextField;
};

type PrismicPageDataBodyCenteredText = PrismicSlice & {
  readonly id: Scalars['ID'];
  readonly primary: PrismicPageDataBodyCenteredTextPrimary;
  readonly slice_label: Maybe<Scalars['String']>;
  readonly slice_type: Scalars['String'];
};

type PrismicPageDataBodyCenteredTextPrimary = {
  /** A Rich Text field. */
  readonly text: PrismicRichTextField;
};

type PrismicPageDataBodyPageIntro = PrismicSlice & {
  readonly id: Scalars['ID'];
  readonly primary: PrismicPageDataBodyPageIntroPrimary;
  readonly slice_label: Maybe<Scalars['String']>;
  readonly slice_type: Scalars['String'];
};

type PrismicPageDataBodyPageIntroPrimary = {
  /** A Title field. */
  readonly heading: PrismicRichTextField;
  /** A Content Relationship field. */
  readonly navigation: Maybe<PrismicLinkField>;
};

type PrismicPageDataBodyTeam = PrismicSlice & {
  readonly id: Scalars['ID'];
  readonly primary: PrismicPageDataBodyTeamPrimary;
  readonly slice_label: Maybe<Scalars['String']>;
  readonly slice_type: Scalars['String'];
};

type PrismicPageDataBodyTeamPrimary = {
  /** A Title field. */
  readonly directors_heading: PrismicRichTextField;
  /** A Title field. */
  readonly directors_subheading: PrismicRichTextField;
  /** A Title field. */
  readonly staff_team_heading: PrismicRichTextField;
};

type PrismicPageDataBodyTextWithImage = PrismicSlice & {
  readonly id: Scalars['ID'];
  readonly items: ReadonlyArray<PrismicPageDataBodyTextWithImageItem>;
  readonly primary: PrismicPageDataBodyTextWithImagePrimary;
  readonly slice_label: Maybe<Scalars['String']>;
  readonly slice_type: Scalars['String'];
};

type PrismicPageDataBodyTextWithImageItem = {
  /**
   * A Link field.
   *
   * To download linked files locally and populate the `localFile` field, add the following path to `gatsby-source-prismic`'s `shouldDownloadFiles` option:
   *
   * `"page.data.body.text_with_image.items.button_link": true,`
   */
  readonly button_link: Maybe<PrismicLinkField>;
  /** A Rich Text field. */
  readonly button_text: PrismicRichTextField;
  /** An Image field. */
  readonly image: Maybe<PrismicImageField>;
  /** A Rich Text field. */
  readonly text: PrismicRichTextField;
};

type PrismicPageDataBodyTextWithImagePrimary = {
  /** A Title field. */
  readonly heading: PrismicRichTextField;
  /** A Title field. */
  readonly subheading: PrismicRichTextField;
};

type PrismicPageDataBodyTexturedImage = PrismicSlice & {
  readonly id: Scalars['ID'];
  readonly primary: PrismicPageDataBodyTexturedImagePrimary;
  readonly slice_label: Maybe<Scalars['String']>;
  readonly slice_type: Scalars['String'];
};

type PrismicPageDataBodyTexturedImagePrimary = {
  /** An Image field. */
  readonly image: Maybe<PrismicImageField>;
};

type PrismicPageDataBodyTwoColumnText = PrismicSlice & {
  readonly id: Scalars['ID'];
  readonly primary: PrismicPageDataBodyTwoColumnTextPrimary;
  readonly slice_label: Maybe<Scalars['String']>;
  readonly slice_type: Scalars['String'];
};

type PrismicPageDataBodyTwoColumnTextPrimary = {
  /** A Rich Text field. */
  readonly left_text: PrismicRichTextField;
  /** A Rich Text field. */
  readonly right_text: PrismicRichTextField;
};

type PrismicPageDataFieldSelector = {
  readonly meta_description: InputMaybe<FieldSelectorEnum>;
  readonly meta_title: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<PrismicLinkFieldFieldSelector>;
  readonly redirect_is_permanent: InputMaybe<FieldSelectorEnum>;
  readonly redirect_to: InputMaybe<PrismicLinkFieldFieldSelector>;
  readonly title: InputMaybe<PrismicRichTextFieldFieldSelector>;
};

type PrismicPageDataFilterInput = {
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<PrismicLinkFieldFilterInput>;
  readonly redirect_is_permanent: InputMaybe<BooleanQueryOperatorInput>;
  readonly redirect_to: InputMaybe<PrismicLinkFieldFilterInput>;
  readonly title: InputMaybe<PrismicRichTextFieldFilterInput>;
};

type PrismicPageDataSortInput = {
  readonly meta_description: InputMaybe<SortOrderEnum>;
  readonly meta_title: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<PrismicLinkFieldSortInput>;
  readonly redirect_is_permanent: InputMaybe<SortOrderEnum>;
  readonly redirect_to: InputMaybe<PrismicLinkFieldSortInput>;
  readonly title: InputMaybe<PrismicRichTextFieldSortInput>;
};

type PrismicPageEdge = {
  readonly next: Maybe<PrismicPage>;
  readonly node: PrismicPage;
  readonly previous: Maybe<PrismicPage>;
};

type PrismicPageFieldSelector = {
  readonly _previewable: InputMaybe<FieldSelectorEnum>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly data: InputMaybe<PrismicPageDataFieldSelector>;
  readonly dataRaw: InputMaybe<FieldSelectorEnum>;
  readonly first_publication_date: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lang: InputMaybe<FieldSelectorEnum>;
  readonly last_publication_date: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prismicId: InputMaybe<FieldSelectorEnum>;
  readonly raw: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type PrismicPageFilterInput = {
  readonly _previewable: InputMaybe<IDQueryOperatorInput>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly data: InputMaybe<PrismicPageDataFilterInput>;
  readonly dataRaw: InputMaybe<JSONQueryOperatorInput>;
  readonly first_publication_date: InputMaybe<DateQueryOperatorInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lang: InputMaybe<StringQueryOperatorInput>;
  readonly last_publication_date: InputMaybe<DateQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prismicId: InputMaybe<IDQueryOperatorInput>;
  readonly raw: InputMaybe<JSONQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type PrismicPageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PrismicPageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PrismicPageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PrismicPage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PrismicPageGroupConnection_distinctArgs = {
  field: PrismicPageFieldSelector;
};


type PrismicPageGroupConnection_groupArgs = {
  field: PrismicPageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PrismicPageGroupConnection_maxArgs = {
  field: PrismicPageFieldSelector;
};


type PrismicPageGroupConnection_minArgs = {
  field: PrismicPageFieldSelector;
};


type PrismicPageGroupConnection_sumArgs = {
  field: PrismicPageFieldSelector;
};

type PrismicPageSortInput = {
  readonly _previewable: InputMaybe<SortOrderEnum>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly data: InputMaybe<PrismicPageDataSortInput>;
  readonly dataRaw: InputMaybe<SortOrderEnum>;
  readonly first_publication_date: InputMaybe<SortOrderEnum>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lang: InputMaybe<SortOrderEnum>;
  readonly last_publication_date: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prismicId: InputMaybe<SortOrderEnum>;
  readonly raw: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

/** A Person document from Prismic. */
type PrismicPerson = Node & {
  /** Query this field to enable preview support on this node. Requires `gatsby-plugin-prismic-preview` integrated in your app to enable previews. */
  readonly _previewable: Scalars['ID'];
  /** Alternate versions of the document in different languages. */
  readonly alternate_languages: ReadonlyArray<PrismicAlternateLanguage>;
  readonly children: ReadonlyArray<Node>;
  /** Content for the document. */
  readonly data: PrismicPersonData;
  /** **Do not use this field unless you know what you are doing**. The unprocessed `data` property of the Prismic document. Querying individual fields via GraphQL is much preferred. */
  readonly dataRaw: Scalars['JSON'];
  /** The timestamp at which the document was first published. */
  readonly first_publication_date: Scalars['Date'];
  /** The URL to fetch this document's JSON value from the Prismic REST API. */
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** The language of the Prismic document. */
  readonly lang: Scalars['String'];
  /** The timestamp at which the document was last published. */
  readonly last_publication_date: Scalars['Date'];
  readonly parent: Maybe<Node>;
  /** The identifier for the Prismic document. It is guaranteed to be unique within all documents of all types from the same Prismic repository. */
  readonly prismicId: Scalars['ID'];
  /** **Do not use this field unless you know what you are doing**. The unprocessed Prismic document value returned from the Prismic REST API. */
  readonly raw: Scalars['JSON'];
  /** Tags associated with the Prismic document. */
  readonly tags: ReadonlyArray<Scalars['String']>;
  /** The type of the Prismic document. */
  readonly type: Scalars['String'];
  /** The unique identifier for the Prismic document. It is guaranteed to be unique within all documents of the same type from the same Prismic repository. */
  readonly uid: Scalars['String'];
  /** The URL of the Prismic document determined using the configured Route Resolvers or Link Resolver. If Route Resolvers or a Link Resolver is not given, this field is `null`. */
  readonly url: Maybe<Scalars['String']>;
};


/** A Person document from Prismic. */
type PrismicPerson_first_publication_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


/** A Person document from Prismic. */
type PrismicPerson_last_publication_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type PrismicPersonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PrismicPersonEdge>;
  readonly group: ReadonlyArray<PrismicPersonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PrismicPerson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PrismicPersonConnection_distinctArgs = {
  field: PrismicPersonFieldSelector;
};


type PrismicPersonConnection_groupArgs = {
  field: PrismicPersonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PrismicPersonConnection_maxArgs = {
  field: PrismicPersonFieldSelector;
};


type PrismicPersonConnection_minArgs = {
  field: PrismicPersonFieldSelector;
};


type PrismicPersonConnection_sumArgs = {
  field: PrismicPersonFieldSelector;
};

type PrismicPersonData = {
  /** A Rich Text field. */
  readonly bio: PrismicRichTextField;
  /**
   * A Link field.
   *
   * To download linked files locally and populate the `localFile` field, add the following path to `gatsby-source-prismic`'s `shouldDownloadFiles` option:
   *
   * `"person.data.bio_link": true,`
   */
  readonly bio_link: Maybe<PrismicLinkField>;
  /** A Title field. */
  readonly first_name: PrismicRichTextField;
  /** An Image field. */
  readonly headshot: Maybe<PrismicImageField>;
  /** A Title field. */
  readonly last_name: PrismicRichTextField;
  /** A Select field with a default value. **Default value**: Director */
  readonly position_type: Maybe<Scalars['String']>;
  /** A Rich Text field. */
  readonly title: PrismicRichTextField;
};

type PrismicPersonDataFieldSelector = {
  readonly bio: InputMaybe<PrismicRichTextFieldFieldSelector>;
  readonly bio_link: InputMaybe<PrismicLinkFieldFieldSelector>;
  readonly first_name: InputMaybe<PrismicRichTextFieldFieldSelector>;
  readonly headshot: InputMaybe<PrismicImageFieldFieldSelector>;
  readonly last_name: InputMaybe<PrismicRichTextFieldFieldSelector>;
  readonly position_type: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<PrismicRichTextFieldFieldSelector>;
};

type PrismicPersonDataFilterInput = {
  readonly bio: InputMaybe<PrismicRichTextFieldFilterInput>;
  readonly bio_link: InputMaybe<PrismicLinkFieldFilterInput>;
  readonly first_name: InputMaybe<PrismicRichTextFieldFilterInput>;
  readonly headshot: InputMaybe<PrismicImageFieldFilterInput>;
  readonly last_name: InputMaybe<PrismicRichTextFieldFilterInput>;
  readonly position_type: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<PrismicRichTextFieldFilterInput>;
};

type PrismicPersonDataSortInput = {
  readonly bio: InputMaybe<PrismicRichTextFieldSortInput>;
  readonly bio_link: InputMaybe<PrismicLinkFieldSortInput>;
  readonly first_name: InputMaybe<PrismicRichTextFieldSortInput>;
  readonly headshot: InputMaybe<PrismicImageFieldSortInput>;
  readonly last_name: InputMaybe<PrismicRichTextFieldSortInput>;
  readonly position_type: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<PrismicRichTextFieldSortInput>;
};

type PrismicPersonEdge = {
  readonly next: Maybe<PrismicPerson>;
  readonly node: PrismicPerson;
  readonly previous: Maybe<PrismicPerson>;
};

type PrismicPersonFieldSelector = {
  readonly _previewable: InputMaybe<FieldSelectorEnum>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly data: InputMaybe<PrismicPersonDataFieldSelector>;
  readonly dataRaw: InputMaybe<FieldSelectorEnum>;
  readonly first_publication_date: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lang: InputMaybe<FieldSelectorEnum>;
  readonly last_publication_date: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prismicId: InputMaybe<FieldSelectorEnum>;
  readonly raw: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type PrismicPersonFilterInput = {
  readonly _previewable: InputMaybe<IDQueryOperatorInput>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly data: InputMaybe<PrismicPersonDataFilterInput>;
  readonly dataRaw: InputMaybe<JSONQueryOperatorInput>;
  readonly first_publication_date: InputMaybe<DateQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lang: InputMaybe<StringQueryOperatorInput>;
  readonly last_publication_date: InputMaybe<DateQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prismicId: InputMaybe<IDQueryOperatorInput>;
  readonly raw: InputMaybe<JSONQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type PrismicPersonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PrismicPersonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PrismicPersonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PrismicPerson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PrismicPersonGroupConnection_distinctArgs = {
  field: PrismicPersonFieldSelector;
};


type PrismicPersonGroupConnection_groupArgs = {
  field: PrismicPersonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PrismicPersonGroupConnection_maxArgs = {
  field: PrismicPersonFieldSelector;
};


type PrismicPersonGroupConnection_minArgs = {
  field: PrismicPersonFieldSelector;
};


type PrismicPersonGroupConnection_sumArgs = {
  field: PrismicPersonFieldSelector;
};

type PrismicPersonSortInput = {
  readonly _previewable: InputMaybe<SortOrderEnum>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly data: InputMaybe<PrismicPersonDataSortInput>;
  readonly dataRaw: InputMaybe<SortOrderEnum>;
  readonly first_publication_date: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lang: InputMaybe<SortOrderEnum>;
  readonly last_publication_date: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prismicId: InputMaybe<SortOrderEnum>;
  readonly raw: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

/** Rich Text provided in various formats. */
type PrismicRichTextField = {
  /** The Rich Text value formatted as HTML. */
  readonly html: Maybe<Scalars['String']>;
  /**
   * The Rich Text value in its "raw" form.
   * @deprecated This field has been renamed to `richText`. The `richText` field has the same value the `raw` field.
   */
  readonly raw: Scalars['PrismicRichText'];
  /** The Rich Text value in its "raw" form. */
  readonly richText: Scalars['PrismicRichText'];
  /** The Rich Text value formatted as text. */
  readonly text: Maybe<Scalars['String']>;
};

type PrismicRichTextFieldFieldSelector = {
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly raw: InputMaybe<FieldSelectorEnum>;
  readonly richText: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type PrismicRichTextFieldFilterInput = {
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly raw: InputMaybe<PrismicRichTextQueryOperatorInput>;
  readonly richText: InputMaybe<PrismicRichTextQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type PrismicRichTextFieldSortInput = {
  readonly html: InputMaybe<SortOrderEnum>;
  readonly raw: InputMaybe<SortOrderEnum>;
  readonly richText: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type PrismicRichTextQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['PrismicRichText']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['PrismicRichText']>>>;
  readonly ne: InputMaybe<Scalars['PrismicRichText']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['PrismicRichText']>>>;
};

/** A Settings document from Prismic. */
type PrismicSettings = Node & {
  /** Query this field to enable preview support on this node. Requires `gatsby-plugin-prismic-preview` integrated in your app to enable previews. */
  readonly _previewable: Scalars['ID'];
  /** Alternate versions of the document in different languages. */
  readonly alternate_languages: ReadonlyArray<PrismicAlternateLanguage>;
  readonly children: ReadonlyArray<Node>;
  /** Content for the document. */
  readonly data: PrismicSettingsData;
  /** **Do not use this field unless you know what you are doing**. The unprocessed `data` property of the Prismic document. Querying individual fields via GraphQL is much preferred. */
  readonly dataRaw: Scalars['JSON'];
  /** The timestamp at which the document was first published. */
  readonly first_publication_date: Scalars['Date'];
  /** The URL to fetch this document's JSON value from the Prismic REST API. */
  readonly href: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  /** The language of the Prismic document. */
  readonly lang: Scalars['String'];
  /** The timestamp at which the document was last published. */
  readonly last_publication_date: Scalars['Date'];
  readonly parent: Maybe<Node>;
  /** The identifier for the Prismic document. It is guaranteed to be unique within all documents of all types from the same Prismic repository. */
  readonly prismicId: Scalars['ID'];
  /** **Do not use this field unless you know what you are doing**. The unprocessed Prismic document value returned from the Prismic REST API. */
  readonly raw: Scalars['JSON'];
  /** Tags associated with the Prismic document. */
  readonly tags: ReadonlyArray<Scalars['String']>;
  /** The type of the Prismic document. */
  readonly type: Scalars['String'];
  /** The URL of the Prismic document determined using the configured Route Resolvers or Link Resolver. If Route Resolvers or a Link Resolver is not given, this field is `null`. */
  readonly url: Maybe<Scalars['String']>;
};


/** A Settings document from Prismic. */
type PrismicSettings_first_publication_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


/** A Settings document from Prismic. */
type PrismicSettings_last_publication_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type PrismicSettingsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PrismicSettingsEdge>;
  readonly group: ReadonlyArray<PrismicSettingsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PrismicSettings>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PrismicSettingsConnection_distinctArgs = {
  field: PrismicSettingsFieldSelector;
};


type PrismicSettingsConnection_groupArgs = {
  field: PrismicSettingsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PrismicSettingsConnection_maxArgs = {
  field: PrismicSettingsFieldSelector;
};


type PrismicSettingsConnection_minArgs = {
  field: PrismicSettingsFieldSelector;
};


type PrismicSettingsConnection_sumArgs = {
  field: PrismicSettingsFieldSelector;
};

type PrismicSettingsData = {
  /** A Group field. */
  readonly preview_map: ReadonlyArray<PrismicSettingsDataPreviewMapItem>;
  /** A Group field. */
  readonly redirects: ReadonlyArray<PrismicSettingsDataRedirectsItem>;
  /** A Rich Text field. */
  readonly site_copyright: PrismicRichTextField;
  /** A Rich Text field. */
  readonly site_description: PrismicRichTextField;
  /** A Rich Text field. */
  readonly site_disclaimer: PrismicRichTextField;
  /** A Title field. */
  readonly site_name: PrismicRichTextField;
  /** A Title field. */
  readonly title: PrismicRichTextField;
};

type PrismicSettingsDataFieldSelector = {
  readonly preview_map: InputMaybe<PrismicSettingsDataPreviewMapItemFieldSelector>;
  readonly redirects: InputMaybe<PrismicSettingsDataRedirectsItemFieldSelector>;
  readonly site_copyright: InputMaybe<PrismicRichTextFieldFieldSelector>;
  readonly site_description: InputMaybe<PrismicRichTextFieldFieldSelector>;
  readonly site_disclaimer: InputMaybe<PrismicRichTextFieldFieldSelector>;
  readonly site_name: InputMaybe<PrismicRichTextFieldFieldSelector>;
  readonly title: InputMaybe<PrismicRichTextFieldFieldSelector>;
};

type PrismicSettingsDataFilterInput = {
  readonly preview_map: InputMaybe<PrismicSettingsDataPreviewMapItemFilterListInput>;
  readonly redirects: InputMaybe<PrismicSettingsDataRedirectsItemFilterListInput>;
  readonly site_copyright: InputMaybe<PrismicRichTextFieldFilterInput>;
  readonly site_description: InputMaybe<PrismicRichTextFieldFilterInput>;
  readonly site_disclaimer: InputMaybe<PrismicRichTextFieldFilterInput>;
  readonly site_name: InputMaybe<PrismicRichTextFieldFilterInput>;
  readonly title: InputMaybe<PrismicRichTextFieldFilterInput>;
};

/** An item for a Group field. */
type PrismicSettingsDataPreviewMapItem = {
  /** A Key Text field. */
  readonly api_id: Maybe<Scalars['String']>;
  /**
   * A Link field.
   *
   * To download linked files locally and populate the `localFile` field, add the following path to `gatsby-source-prismic`'s `shouldDownloadFiles` option:
   *
   * `"settings.data.preview_map.page": true,`
   */
  readonly page: Maybe<PrismicLinkField>;
};

type PrismicSettingsDataPreviewMapItemFieldSelector = {
  readonly api_id: InputMaybe<FieldSelectorEnum>;
  readonly page: InputMaybe<PrismicLinkFieldFieldSelector>;
};

type PrismicSettingsDataPreviewMapItemFilterInput = {
  readonly api_id: InputMaybe<StringQueryOperatorInput>;
  readonly page: InputMaybe<PrismicLinkFieldFilterInput>;
};

type PrismicSettingsDataPreviewMapItemFilterListInput = {
  readonly elemMatch: InputMaybe<PrismicSettingsDataPreviewMapItemFilterInput>;
};

type PrismicSettingsDataPreviewMapItemSortInput = {
  readonly api_id: InputMaybe<SortOrderEnum>;
  readonly page: InputMaybe<PrismicLinkFieldSortInput>;
};

/** An item for a Group field. */
type PrismicSettingsDataRedirectsItem = {
  /** A Key Text field. */
  readonly from_path: Maybe<Scalars['String']>;
  /** A Boolean field. */
  readonly is_permanent: Maybe<Scalars['Boolean']>;
  /** A Key Text field. */
  readonly to_path: Maybe<Scalars['String']>;
};

type PrismicSettingsDataRedirectsItemFieldSelector = {
  readonly from_path: InputMaybe<FieldSelectorEnum>;
  readonly is_permanent: InputMaybe<FieldSelectorEnum>;
  readonly to_path: InputMaybe<FieldSelectorEnum>;
};

type PrismicSettingsDataRedirectsItemFilterInput = {
  readonly from_path: InputMaybe<StringQueryOperatorInput>;
  readonly is_permanent: InputMaybe<BooleanQueryOperatorInput>;
  readonly to_path: InputMaybe<StringQueryOperatorInput>;
};

type PrismicSettingsDataRedirectsItemFilterListInput = {
  readonly elemMatch: InputMaybe<PrismicSettingsDataRedirectsItemFilterInput>;
};

type PrismicSettingsDataRedirectsItemSortInput = {
  readonly from_path: InputMaybe<SortOrderEnum>;
  readonly is_permanent: InputMaybe<SortOrderEnum>;
  readonly to_path: InputMaybe<SortOrderEnum>;
};

type PrismicSettingsDataSortInput = {
  readonly preview_map: InputMaybe<PrismicSettingsDataPreviewMapItemSortInput>;
  readonly redirects: InputMaybe<PrismicSettingsDataRedirectsItemSortInput>;
  readonly site_copyright: InputMaybe<PrismicRichTextFieldSortInput>;
  readonly site_description: InputMaybe<PrismicRichTextFieldSortInput>;
  readonly site_disclaimer: InputMaybe<PrismicRichTextFieldSortInput>;
  readonly site_name: InputMaybe<PrismicRichTextFieldSortInput>;
  readonly title: InputMaybe<PrismicRichTextFieldSortInput>;
};

type PrismicSettingsEdge = {
  readonly next: Maybe<PrismicSettings>;
  readonly node: PrismicSettings;
  readonly previous: Maybe<PrismicSettings>;
};

type PrismicSettingsFieldSelector = {
  readonly _previewable: InputMaybe<FieldSelectorEnum>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly data: InputMaybe<PrismicSettingsDataFieldSelector>;
  readonly dataRaw: InputMaybe<FieldSelectorEnum>;
  readonly first_publication_date: InputMaybe<FieldSelectorEnum>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lang: InputMaybe<FieldSelectorEnum>;
  readonly last_publication_date: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prismicId: InputMaybe<FieldSelectorEnum>;
  readonly raw: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type PrismicSettingsFilterInput = {
  readonly _previewable: InputMaybe<IDQueryOperatorInput>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly data: InputMaybe<PrismicSettingsDataFilterInput>;
  readonly dataRaw: InputMaybe<JSONQueryOperatorInput>;
  readonly first_publication_date: InputMaybe<DateQueryOperatorInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lang: InputMaybe<StringQueryOperatorInput>;
  readonly last_publication_date: InputMaybe<DateQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prismicId: InputMaybe<IDQueryOperatorInput>;
  readonly raw: InputMaybe<JSONQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type PrismicSettingsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<PrismicSettingsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<PrismicSettingsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<PrismicSettings>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type PrismicSettingsGroupConnection_distinctArgs = {
  field: PrismicSettingsFieldSelector;
};


type PrismicSettingsGroupConnection_groupArgs = {
  field: PrismicSettingsFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type PrismicSettingsGroupConnection_maxArgs = {
  field: PrismicSettingsFieldSelector;
};


type PrismicSettingsGroupConnection_minArgs = {
  field: PrismicSettingsFieldSelector;
};


type PrismicSettingsGroupConnection_sumArgs = {
  field: PrismicSettingsFieldSelector;
};

type PrismicSettingsSortInput = {
  readonly _previewable: InputMaybe<SortOrderEnum>;
  readonly alternate_languages: InputMaybe<PrismicAlternateLanguageSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly data: InputMaybe<PrismicSettingsDataSortInput>;
  readonly dataRaw: InputMaybe<SortOrderEnum>;
  readonly first_publication_date: InputMaybe<SortOrderEnum>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lang: InputMaybe<SortOrderEnum>;
  readonly last_publication_date: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prismicId: InputMaybe<SortOrderEnum>;
  readonly raw: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

/** A collection of fields used in flexible content areas (called Slice Zones) of a Prismic document. */
type PrismicSharedSlice = {
  readonly id: Scalars['ID'];
  readonly slice_label: Maybe<Scalars['String']>;
  readonly slice_type: Scalars['String'];
  readonly variation: Scalars['String'];
  readonly version: Scalars['String'];
};

type PrismicSlice = {
  readonly id: Scalars['ID'];
  readonly slice_label: Maybe<Scalars['String']>;
  readonly slice_type: Scalars['String'];
};

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allPrismicEmbedField: PrismicEmbedFieldConnection;
  readonly allPrismicNavigation: PrismicNavigationConnection;
  readonly allPrismicPage: PrismicPageConnection;
  readonly allPrismicPerson: PrismicPersonConnection;
  readonly allPrismicSettings: PrismicSettingsConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly prismicEmbedField: Maybe<PrismicEmbedField>;
  readonly prismicNavigation: Maybe<PrismicNavigation>;
  readonly prismicPage: Maybe<PrismicPage>;
  readonly prismicPerson: Maybe<PrismicPerson>;
  readonly prismicSettings: Maybe<PrismicSettings>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allPrismicEmbedFieldArgs = {
  filter: InputMaybe<PrismicEmbedFieldFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PrismicEmbedFieldSortInput>>>;
};


type Query_allPrismicNavigationArgs = {
  filter: InputMaybe<PrismicNavigationFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PrismicNavigationSortInput>>>;
};


type Query_allPrismicPageArgs = {
  filter: InputMaybe<PrismicPageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PrismicPageSortInput>>>;
};


type Query_allPrismicPersonArgs = {
  filter: InputMaybe<PrismicPersonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PrismicPersonSortInput>>>;
};


type Query_allPrismicSettingsArgs = {
  filter: InputMaybe<PrismicSettingsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<PrismicSettingsSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_prismicEmbedFieldArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_prismicNavigationArgs = {
  _previewable: InputMaybe<IDQueryOperatorInput>;
  alternate_languages: InputMaybe<PrismicAlternateLanguageFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  data: InputMaybe<PrismicNavigationDataFilterInput>;
  dataRaw: InputMaybe<JSONQueryOperatorInput>;
  first_publication_date: InputMaybe<DateQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  lang: InputMaybe<StringQueryOperatorInput>;
  last_publication_date: InputMaybe<DateQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prismicId: InputMaybe<IDQueryOperatorInput>;
  raw: InputMaybe<JSONQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_prismicPageArgs = {
  _previewable: InputMaybe<IDQueryOperatorInput>;
  alternate_languages: InputMaybe<PrismicAlternateLanguageFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  data: InputMaybe<PrismicPageDataFilterInput>;
  dataRaw: InputMaybe<JSONQueryOperatorInput>;
  first_publication_date: InputMaybe<DateQueryOperatorInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  lang: InputMaybe<StringQueryOperatorInput>;
  last_publication_date: InputMaybe<DateQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prismicId: InputMaybe<IDQueryOperatorInput>;
  raw: InputMaybe<JSONQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_prismicPersonArgs = {
  _previewable: InputMaybe<IDQueryOperatorInput>;
  alternate_languages: InputMaybe<PrismicAlternateLanguageFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  data: InputMaybe<PrismicPersonDataFilterInput>;
  dataRaw: InputMaybe<JSONQueryOperatorInput>;
  first_publication_date: InputMaybe<DateQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  lang: InputMaybe<StringQueryOperatorInput>;
  last_publication_date: InputMaybe<DateQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prismicId: InputMaybe<IDQueryOperatorInput>;
  raw: InputMaybe<JSONQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_prismicSettingsArgs = {
  _previewable: InputMaybe<IDQueryOperatorInput>;
  alternate_languages: InputMaybe<PrismicAlternateLanguageFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  data: InputMaybe<PrismicSettingsDataFilterInput>;
  dataRaw: InputMaybe<JSONQueryOperatorInput>;
  first_publication_date: InputMaybe<DateQueryOperatorInput>;
  href: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  lang: InputMaybe<StringQueryOperatorInput>;
  last_publication_date: InputMaybe<DateQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prismicId: InputMaybe<IDQueryOperatorInput>;
  raw: InputMaybe<JSONQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly titleShort: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly titleShort: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly titleShort: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly titleShort: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type AllPersonsFragment = { readonly allPrismicPerson: { readonly nodes: ReadonlyArray<{ readonly _previewable: string, readonly prismicId: string, readonly data: { readonly position_type: string | null, readonly first_name: { readonly text: string | null }, readonly last_name: { readonly text: string | null }, readonly title: { readonly text: string | null }, readonly headshot: { readonly gatsbyImageData: Record<string, unknown> | null } | null, readonly bio: { readonly html: string | null }, readonly bio_link: { readonly url: string | null } | null } }> } };

type AnchorFragment = { readonly id: string, readonly primary: { readonly anchor: string | null } };

type CallToActionFragment = { readonly id: string, readonly primary: { readonly heading: { readonly text: string | null }, readonly subheading: { readonly text: string | null }, readonly text: { readonly html: string | null } } };

type CenteredTextFragment = { readonly id: string, readonly primary: { readonly text: { readonly html: string | null } } };

type PageIntroFragment = { readonly id: string, readonly primary: { readonly heading: { readonly text: string | null }, readonly navigation: { readonly document: { readonly __typename: 'PrismicNavigation', readonly _previewable: string, readonly data: { readonly nav_items: ReadonlyArray<{ readonly label: { readonly text: string | null }, readonly link: { readonly url: string | null } | null }> } } | { readonly __typename: 'PrismicPage' } | { readonly __typename: 'PrismicPerson' } | { readonly __typename: 'PrismicSettings' } | null } | null } };

type PageTemplateQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type PageTemplateQuery = { readonly prismicPage: { readonly _previewable: string, readonly prismicId: string, readonly data: { readonly meta_title: string | null, readonly meta_description: string | null, readonly title: { readonly text: string | null }, readonly body: ReadonlyArray<{ readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly anchor: string | null } } | { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly heading: { readonly text: string | null }, readonly subheading: { readonly text: string | null }, readonly text: { readonly html: string | null } } } | { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly text: { readonly html: string | null } } } | { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly heading: { readonly text: string | null }, readonly navigation: { readonly document: { readonly __typename: 'PrismicNavigation', readonly _previewable: string, readonly data: { readonly nav_items: ReadonlyArray<{ readonly label: { readonly text: string | null }, readonly link: { readonly url: string | null } | null }> } } | { readonly __typename: 'PrismicPage' } | { readonly __typename: 'PrismicPerson' } | { readonly __typename: 'PrismicSettings' } | null } | null } } | { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly directors_subheading: { readonly text: string | null }, readonly directors_heading: { readonly text: string | null }, readonly staff_team_heading: { readonly text: string | null } } } | { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly subheading: { readonly text: string | null }, readonly heading: { readonly text: string | null } }, readonly items: ReadonlyArray<{ readonly image: { readonly alt: string | null, readonly gatsbyImageData: Record<string, unknown> | null } | null, readonly text: { readonly html: string | null }, readonly button_text: { readonly text: string | null }, readonly button_link: { readonly url: string | null } | null }> } | { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly image: { readonly alt: string | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } } | { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly left_text: { readonly html: string | null }, readonly right_text: { readonly html: string | null } } }> } } | null, readonly allPrismicPerson: { readonly nodes: ReadonlyArray<{ readonly _previewable: string, readonly prismicId: string, readonly data: { readonly position_type: string | null, readonly first_name: { readonly text: string | null }, readonly last_name: { readonly text: string | null }, readonly title: { readonly text: string | null }, readonly headshot: { readonly gatsbyImageData: Record<string, unknown> | null } | null, readonly bio: { readonly html: string | null }, readonly bio_link: { readonly url: string | null } | null } }> } };

type PrimaryNavigationQueryVariables = Exact<{ [key: string]: never; }>;


type PrimaryNavigationQuery = { readonly prismicNavigation: { readonly _previewable: string, readonly data: { readonly nav_items: ReadonlyArray<{ readonly label: { readonly text: string | null }, readonly link: { readonly url: string | null } | null }> } } | null };

type PrismicSiteSettingsQueryVariables = Exact<{ [key: string]: never; }>;


type PrismicSiteSettingsQuery = { readonly prismicSettings: { readonly _previewable: string, readonly data: { readonly site_name: { readonly text: string | null }, readonly site_description: { readonly text: string | null }, readonly site_copyright: { readonly text: string | null }, readonly site_disclaimer: { readonly html: string | null } } } | null };

type Slices_PrismicPageDataBodyAnchor_Fragment = { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly anchor: string | null } };

type Slices_PrismicPageDataBodyCallToAction_Fragment = { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly heading: { readonly text: string | null }, readonly subheading: { readonly text: string | null }, readonly text: { readonly html: string | null } } };

type Slices_PrismicPageDataBodyCenteredText_Fragment = { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly text: { readonly html: string | null } } };

type Slices_PrismicPageDataBodyPageIntro_Fragment = { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly heading: { readonly text: string | null }, readonly navigation: { readonly document: { readonly __typename: 'PrismicNavigation', readonly _previewable: string, readonly data: { readonly nav_items: ReadonlyArray<{ readonly label: { readonly text: string | null }, readonly link: { readonly url: string | null } | null }> } } | { readonly __typename: 'PrismicPage' } | { readonly __typename: 'PrismicPerson' } | { readonly __typename: 'PrismicSettings' } | null } | null } };

type Slices_PrismicPageDataBodyTeam_Fragment = { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly directors_subheading: { readonly text: string | null }, readonly directors_heading: { readonly text: string | null }, readonly staff_team_heading: { readonly text: string | null } } };

type Slices_PrismicPageDataBodyTextWithImage_Fragment = { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly subheading: { readonly text: string | null }, readonly heading: { readonly text: string | null } }, readonly items: ReadonlyArray<{ readonly image: { readonly alt: string | null, readonly gatsbyImageData: Record<string, unknown> | null } | null, readonly text: { readonly html: string | null }, readonly button_text: { readonly text: string | null }, readonly button_link: { readonly url: string | null } | null }> };

type Slices_PrismicPageDataBodyTexturedImage_Fragment = { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly image: { readonly alt: string | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } };

type Slices_PrismicPageDataBodyTwoColumnText_Fragment = { readonly id: string, readonly slice_label: string | null, readonly slice_type: string, readonly primary: { readonly left_text: { readonly html: string | null }, readonly right_text: { readonly html: string | null } } };

type SlicesFragment = Slices_PrismicPageDataBodyAnchor_Fragment | Slices_PrismicPageDataBodyCallToAction_Fragment | Slices_PrismicPageDataBodyCenteredText_Fragment | Slices_PrismicPageDataBodyPageIntro_Fragment | Slices_PrismicPageDataBodyTeam_Fragment | Slices_PrismicPageDataBodyTextWithImage_Fragment | Slices_PrismicPageDataBodyTexturedImage_Fragment | Slices_PrismicPageDataBodyTwoColumnText_Fragment;

type TeamFragment = { readonly id: string, readonly primary: { readonly directors_subheading: { readonly text: string | null }, readonly directors_heading: { readonly text: string | null }, readonly staff_team_heading: { readonly text: string | null } } };

type TexturedImageFragment = { readonly id: string, readonly primary: { readonly image: { readonly alt: string | null, readonly gatsbyImageData: Record<string, unknown> | null } | null } };

type TextWithImageFragment = { readonly id: string, readonly primary: { readonly subheading: { readonly text: string | null }, readonly heading: { readonly text: string | null } }, readonly items: ReadonlyArray<{ readonly image: { readonly alt: string | null, readonly gatsbyImageData: Record<string, unknown> | null } | null, readonly text: { readonly html: string | null }, readonly button_text: { readonly text: string | null }, readonly button_link: { readonly url: string | null } | null }> };

type TwoColumnTextFragment = { readonly id: string, readonly primary: { readonly left_text: { readonly html: string | null }, readonly right_text: { readonly html: string | null } } };

type NodeAllPagesQueryVariables = Exact<{ [key: string]: never; }>;


type NodeAllPagesQuery = { readonly allPrismicPage: { readonly nodes: ReadonlyArray<{ readonly uid: string, readonly url: string | null, readonly data: { readonly redirect_is_permanent: boolean | null, readonly redirect_to: { readonly url: string | null } | null } }> } };

type NodeSettingsQueryVariables = Exact<{ [key: string]: never; }>;


type NodeSettingsQuery = { readonly prismicSettings: { readonly data: { readonly redirects: ReadonlyArray<{ readonly from_path: string | null, readonly is_permanent: boolean | null, readonly to_path: string | null }> } } | null };


}
